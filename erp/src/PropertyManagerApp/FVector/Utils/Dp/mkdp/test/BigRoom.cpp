//////////////////
// Generated by makedp(1.0.0.0)
////////////////

#include "BigRoom.h"



///////////////////////////////
/////////////////// stLoginAppearance
/////////////////////////////////
stLoginAppearance::stLoginAppearance(void)
{
}


bool stLoginAppearance::load(Dp::Reader &r)
{
	Dp::SizeType structLen;  r >> structLen;
	Dp::SizeType structEnd = r.cursor() + structLen;

	//----- userId -----
	r >> userId;
	//----- nick -----
	r >> nick;
	//----- photoIndex -----
	r >> photoIndex;
	//----- grade -----
	r >> grade;
	//----- redTime -----
	r >> redTime;
	//----- mood -----
	r >> mood;
	//----- headUrl -----
	r >> headUrl;
	//----- sex -----
	r >> sex;
	//----- charm -----
	r >> charm;
	//----- wealth -----
	r >> wealth;
	//----- activity -----
	r >> activity;
	//----- vipRoomId -----
	r >> vipRoomId;
	//----- tycoon -----
	r >> tycoon;
	//----- seller -----
	r >> seller;
	//----- weekStar -----
	r >> weekStar;
	if (!r.ok()) return false;

	while (r.cursor() < structEnd)
	{
		uint8_t mflag; r >> mflag;
		uint8_t mid = Dp::memberId(mflag);
		uint8_t msize = Dp::memberSize(mflag);

		switch (mid)
		{
		default:
			switch (msize)
			{
			case Dp::TypesEnum::size_8: r.skip(1); break;
			case Dp::TypesEnum::size_16:r.skip(2); break;
			case Dp::TypesEnum::size_32:r.skip(4); break;
			case Dp::TypesEnum::size_64:r.skip(8); break;
			case Dp::TypesEnum::size_array: { Dp::SizeType as; r >> as; r.skip(as); } break;
			default:break;
			}
			break;
		}

		if (!r.ok()) return false;
	}
	return true;
}

void stLoginAppearance::save(Dp::Writer &w)
{
	Dp::SizeType start = w.cursor();
	w.skip(sizeof(Dp::SizeType));

	//----- userId -----
	w << userId;
	//----- nick -----
	w << nick;
	//----- photoIndex -----
	w << photoIndex;
	//----- grade -----
	w << grade;
	//----- redTime -----
	w << redTime;
	//----- mood -----
	w << mood;
	//----- headUrl -----
	w << headUrl;
	//----- sex -----
	w << sex;
	//----- charm -----
	w << charm;
	//----- wealth -----
	w << wealth;
	//----- activity -----
	w << activity;
	//----- vipRoomId -----
	w << vipRoomId;
	//----- tycoon -----
	w << tycoon;
	//----- seller -----
	w << seller;
	//----- weekStar -----
	w << weekStar;

	Dp::SizeType len = w.cursor() - start - sizeof(Dp::SizeType);
	w.set(start,&len,sizeof(Dp::SizeType));
}



///////////////////////////////
/////////////////// stOverRoomAppearance
/////////////////////////////////
stOverRoomAppearance::stOverRoomAppearance(void)
{
}


bool stOverRoomAppearance::load(Dp::Reader &r)
{
	Dp::SizeType structLen;  r >> structLen;
	Dp::SizeType structEnd = r.cursor() + structLen;

	//----- hallId -----
	r >> hallId;
	//----- userInfo -----
	 userInfo.load(r);
	return r.ok();
}

void stOverRoomAppearance::save(Dp::Writer &w)
{
	Dp::SizeType start = w.cursor();
	w.skip(sizeof(Dp::SizeType));

	//----- hallId -----
	w << hallId;
	//----- userInfo -----
	 userInfo.save(w);

	Dp::SizeType len = w.cursor() - start - sizeof(Dp::SizeType);
	w.set(start,&len,sizeof(Dp::SizeType));
}



///////////////////////////////
/////////////////// tagCrsWatchUserListReq
/////////////////////////////////
tagCrsWatchUserListReq::tagCrsWatchUserListReq(void)
	 : cmd(UC_CL_CRS_WATCH_USERLIST_RQ)
{
}


bool tagCrsWatchUserListReq::load(Dp::Reader &r)
{
	Dp::SizeType structLen;  r >> structLen;
	Dp::SizeType structEnd = r.cursor() + structLen;

	//----- cmd -----
	r >> cmd;
	//----- userId -----
	r >> userId;
	return r.ok();
}

void tagCrsWatchUserListReq::save(Dp::Writer &w)
{
	Dp::SizeType start = w.cursor();
	w.skip(sizeof(Dp::SizeType));

	//----- cmd -----
	w << cmd;
	//----- userId -----
	w << userId;

	Dp::SizeType len = w.cursor() - start - sizeof(Dp::SizeType);
	w.set(start,&len,sizeof(Dp::SizeType));
}



///////////////////////////////
/////////////////// tagCrsWatchUserEnterNotify
/////////////////////////////////
tagCrsWatchUserEnterNotify::tagCrsWatchUserEnterNotify(void)
	 : cmd(UC_CL_CRS_WATCH_USER_ENTER_NOTIFY)
{
}


bool tagCrsWatchUserEnterNotify::load(Dp::Reader &r)
{
	Dp::SizeType structLen;  r >> structLen;
	Dp::SizeType structEnd = r.cursor() + structLen;

	//----- cmd -----
	r >> cmd;
	//----- hallId -----
	r >> hallId;
	//----- userInfo -----
	 userInfo.load(r);
	return r.ok();
}

void tagCrsWatchUserEnterNotify::save(Dp::Writer &w)
{
	Dp::SizeType start = w.cursor();
	w.skip(sizeof(Dp::SizeType));

	//----- cmd -----
	w << cmd;
	//----- hallId -----
	w << hallId;
	//----- userInfo -----
	 userInfo.save(w);

	Dp::SizeType len = w.cursor() - start - sizeof(Dp::SizeType);
	w.set(start,&len,sizeof(Dp::SizeType));
}


